x=seq(1,10,2)
x[2]
x
x
clear
x1<-c(4,"12","15")
x1<-as.numeric(x1)
x2<-x1[-(2:3)]
x2<-c(x2,"12")
x2
x1<- rep(1:3,times=4,each=2)
x1<-x1[1:(length(x1)/2)]
x1<-cbind(x1,x1,x1)
x1<-x1*2
x1
seq1<-seq(0,by=2,length.out=5)
seq2<-seq(0,by=2,to=7)
length(seq1)==length(seq2)
length(seq1)
length(seq2)
seq2<-seq(0,by=2,to=8)
length(seq2)
length(seq1)==length(seq2)
vec<-1:10
mat<-matrix(1:10,2,5,byrow=T)
vec[1]==mat[1]
vec[2]==mat[2]
vec
mat
vec1 <- c("M","F","F","M")
vec2<- c("M","M","M","M")
vec1[vec2 == "M"]
vec1<- c(rep(1,10),rep(3,10))
n <- length(rep(1,10))
m <- length(rep(3,10))
vec1[(m+1):(n+m)]/vec1[1:m]
m[1:5]==m[1:5,1]
mat!=mat[,]
mat<-matrix(1:10,2,5,byrow=T)
mat!=mat[,]
mat = matrix(1:25,5,5)
apply(mat,1,mean)
mat
apply(mat,1,mean,byrow=True)
mat = matrix(1:25,5,5,byrow=True)
mat = matrix(1:25,5,5,byrow=TRUE)
mar=t
mat
apply(mat,2,mean)
mat = matrix(1:25,5,5*2)
mat
apply(mat,1,mean/2)
apply(mat,1,mean)/2
mat = matrix(1:25,5,5)
apply(mat,1,mean)
mat
?table
library(readr)
train <- read_csv("data analysis/data analysis projects/titanic dataset/train.csv")
View(train)
library(readr)
test <- read_csv("data analysis/data analysis projects/titanic dataset/test.csv")
View(test)
train <- read_csv("data analysis/data analysis projects/titanic dataset/train.csv")
test <- read_csv("data analysis/data analysis projects/titanic dataset/test.csv")
str(train)
View(test)
train <- read_csv("data analysis/data analysis projects/titanic dataset/train.csv",stringsAsFactors=TRUE)
train <- read_csv("data analysis/data analysis projects/titanic dataset/train.csv")
train$Survived
tabel(train$Survived)
tabel(train$Survived)
table(train$Survived)
table(train)
table(train$Sex)
prop.table(table(train$Survived))
#we Assume that most of the people died as 61.61% of people died
test$Survived<-rep(0,418)
View(test)
View(test)
submit<-data.frame(PassengerId=test$PassengerId,Survived=test$Survived)
write.csv(submit,"theyallperish.csv",row.names=FALSE)
#Set working directories and import datafiles
getwd()
#Gender summary
table(train$Sex)
#Gender-Survived
prop.table(table(train$Sex,train$Survived))
#Gender-Survived
prop.table(table(train$Sex,train$Survived),1)
#This shows that majority of females aboard survived, so lets update the prediction
#Prediction 2
test$Survived<-0
test$Survived[test$Sex=='female'] <-1
prediction2<-data.frame(PassengerId=test$PassengerId,Survived=test$Survived)
write.csv(prediction2,"prediction2.csv",row.names=FALSE)
#Age summary
summary(train$Age)
table(train$Age)
#Age summary
summary(train$Age)
#Age summary
summary(train$Age)
table(train$Age)
train$Child<-0
train$Child[train$Age<18]<-1
table[train$Child]
table(train$Child)
aggregate(Survived ~ Child + Sex, data=train, FUN=sum)
aggregate(Survived ~ Child + Sex, data=train, FUN=length)
aggregate(Survived ~ Child + Sex, data=train, FUN=function(x) {sum(x)/length(x)})
table(train$Pclass)
table(train$Fare)
#prediction 2 remains the same, if female, chances of survival is more
summary(train$Fare)
View(train)
#prediction 2 remains the same, if female, chances of survival is more
summary(train$Fare)
#prediction 2 remains the same, if female, chances of survival is more
summary(train$Fare)
summary(train$Age)
#prediction 2 remains the same, if female, chances of survival is more
summary(train$Fare)
train$Fare2<-'30+'
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- '20-30'
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- '10-20'
train$Fare2[train$Fare < 10] <- '<10'
aggregate(Survived~Fare2+sex+Pclass,FUN=function(x) {sum(x)/length(x)})
aggregate(Survived ~ Fare2+sex+Pclass,FUN=function(x) {sum(x)/length(x)})
aggregate(Survived ~ Fare2+sex+Pclass,data=train,FUN=function(x) {sum(x)/length(x)})
aggregate(Survived ~ Fare2+Sex+Pclass,data=train,FUN=function(x) {sum(x)/length(x)})
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0
prediction3<-data.frame(PassengerId=test$PassengerId,Survived<-test$Survived)
write.csv(prediction3,"prediction3.csv",row.names = FALSE)
prediction3<-data.frame(PassengerId=test$PassengerId,Survived<-test$Survived)
write.csv(prediction3,"prediction3.csv",row.names = FALSE)
prediction3<-data.frame(PassengerId=test$PassengerId,Survived<-test$Survived)
write.csv(prediction3,"prediction3.csv",row.names = FALSE)
prediction3<-data.frame(PassengerId=test$PassengerId,Survived=test$Survived)
write.csv(prediction3,"prediction3.csv",row.names = FALSE)
prediction3<-data.frame(PassengerId=test$PassengerId,Survived=test$Survived)
write.csv(prediction3,"prediction3.csv",row.names = FALSE)
library(rpart)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class")
plot(fit)
text(fit)
install.packages('rattle')
install.packages('rpart.plot')
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
setpwd()
getpwd()
getwd()
setwd('C:/Users/Susheela/Documents/data analysis/assignment 1')
df <- read.csv("car_r.csv", header=TRUE)
names(df)
nrow(df)
nrow(df[,1] == 'Ford')
nrow(df[:,1] == 'Ford')
nrow(df[1,1] == 'Ford')
setwd('C:/Users/Susheela/Documents/data analysis/assignment 1') # set the path to file location
getwd()
df<-read.csv("car_r.csv",header=TRUE)                     # reads the file into dataframe 'df'
?read.table  # ? is used for functions usage instructions
names(df)    # variables in the dataframe
count=0     # Number of observations with brand="ford"
for(i in 1:500){
if(df[i,1]=='Ford'){
count=count+1
}
}
print('number of observations')
print(nrow(df))                #Total number of observations
print('Ford count:')
print(count)                  #number of observations with brand="Ford"
#histogram
colMeans(df[2:8],na.rm=TRUE)
print("Standard deviations:")
i=0
for(i in 2:8){
print(colnames(df[i]))
print(c(sd(as.numeric(df[[i]]),na.rm = TRUE)))
}
#histogram
hist(as.numeric(df$brand),xlab="Brand",main="Histogram of Brand parameter")
hist(as.numeric(df$mileage),xlab="mileage",xlim=c(0,70000),main="Histogram of mileage parameter")
hist(as.numeric(df$num_accidents),xlab="num_accidents",main="Histogram of Num_accidents parameter")
hist(as.numeric(df$num_passengers),xlab="num_passengers",xlim=c(0,20),main="Histogram of Num_passengers parameter")
hist(as.numeric(df$speed_car),xlab="speed_car",main="Histogram of Speed_car parameter")
hist(as.numeric(df$speed_air),xlab="speed_air",xlim=c(-14,15),main="Histogram of speed_air parameter")
hist(as.numeric(df$height),xlab="height",main="Histogram of height parameter")
hist(as.numeric(df$width),xlab="width",main="Histogram of width parameter")
hist(as.numeric(df$ABS),xlab="ABS",main="Histogram of ABS Parameter")
#Proportion of missing values in Mileage variable
nacount=0
i=0
for (i in 1:nrow(df)){
if(is.na(as.numeric(df[i,2]))){
nacount<-nacount+1
}
}
nacount
print("Proportion of missing values")
print(nacount/nrow(df))
#relative speed
i=0
relativespeed<-list()
for(i in 1:nrow(df)){
relativespeed[i]<-df[i,5]+df[i,6]
}
print("Average relative speed:")
mean(as.numeric(relativespeed))
#absolute value
print("Mean absolute value of speed_air")
mean(abs(df$speed_air))
#question 8
countmileage=0
for(i in 1:nrow(df)){
if(df[i,2]<40000 | is.na(df[i,2])){
countmileage=countmileage+1
}
}
print("Number of records with Mileage less than 40000 is")
countmileage
i=0
countheight=0
for (i in 1:nrow(df)){
if(df[i,7]<5){
countheight=countheight+1
}
}
print("Number of records with height less than 5 is")
countheight
updatedDF = df[!df$mileage< 40000 & !df$height<5 & !is.na(df$mileage)==TRUE,]
updatedDF
updatedDF <- subset(df, df$mileage>40000  & df$height>5 & is.na(df$mileage)==FALSE) #new dataset with the conditions in the question
updatedDF
#question 9
df_Ford<-subset(updatedDF,updatedDF$brand=="Ford")
df_GM<-subset(updatedDF,updatedDF$brand=="GM")
df_Toyota<-subset(updatedDF,updatedDF$brand=="Toyota")
#question 10
#speed
mean(df_Ford$speed_car)
mean(df_GM$speed_car)
mean(df_Toyota$speed_car)
sd(as.numeric(df_Ford$speed_car),na.rm = TRUE)
sd(as.numeric(df_GM$speed_car),na.rm = TRUE)
sd(as.numeric(df_Toyota$speed_car),na.rm = TRUE)
dim(df_Ford)
dim(df_GM)
dim(df_Toyota)
#height
mean(df_Ford$height)
mean(df_GM$height)
mean(df_Toyota$height)
sd(as.numeric(df_Ford$height),na.rm = TRUE)
sd(as.numeric(df_GM$height),na.rm = TRUE)
sd(as.numeric(df_Toyota$height),na.rm = TRUE)
#width
mean(df_Ford$width)
mean(df_GM$width)
mean(df_Toyota$width)
sd(as.numeric(df_Ford$width),na.rm = TRUE)
sd(as.numeric(df_GM$width),na.rm = TRUE)
sd(as.numeric(df_Toyota$width),na.rm = TRUE)
#number of accidents
mean(df_Ford$num_accidents)
mean(df_GM$num_accidents)
mean(df_Toyota$num_accidents)
#number of passengers
mean(df_Ford$num_passengers)
mean(df_GM$num_passengers)
mean(df_Toyota$num_passengers)
setwd('C:\Users\Susheela\Desktop\GITHUB\Data-Analysis\assignment 1') # set the path to file location
getwd()
df<-read.csv("car_r.csv",header=TRUE)                     # reads the file into dataframe 'df'
?read.table  # ? is used for functions usage instructions
names(df)    # variables in the dataframe
count=0     # Number of observations with brand="ford"
for(i in 1:500){
if(df[i,1]=='Ford'){
count=count+1
}
}
print('number of observations')
print(nrow(df))                #Total number of observations
print('Ford count:')
print(count)                  #number of observations with brand="Ford"
#histogram
colMeans(df[2:8],na.rm=TRUE)
print("Standard deviations:")
i=0
for(i in 2:8){
print(colnames(df[i]))
print(c(sd(as.numeric(df[[i]]),na.rm = TRUE)))
}
#histogram
hist(as.numeric(df$brand),xlab="Brand",main="Histogram of Brand parameter")
hist(as.numeric(df$mileage),xlab="mileage",xlim=c(0,70000),main="Histogram of mileage parameter")
hist(as.numeric(df$num_accidents),xlab="num_accidents",main="Histogram of Num_accidents parameter")
hist(as.numeric(df$num_passengers),xlab="num_passengers",xlim=c(0,20),main="Histogram of Num_passengers parameter")
hist(as.numeric(df$speed_car),xlab="speed_car",main="Histogram of Speed_car parameter")
hist(as.numeric(df$speed_air),xlab="speed_air",xlim=c(-14,15),main="Histogram of speed_air parameter")
hist(as.numeric(df$height),xlab="height",main="Histogram of height parameter")
hist(as.numeric(df$width),xlab="width",main="Histogram of width parameter")
hist(as.numeric(df$ABS),xlab="ABS",main="Histogram of ABS Parameter")
#Proportion of missing values in Mileage variable
nacount=0
i=0
for (i in 1:nrow(df)){
if(is.na(as.numeric(df[i,2]))){
nacount<-nacount+1
}
}
nacount
print("Proportion of missing values")
print(nacount/nrow(df))
#relative speed
i=0
relativespeed<-list()
for(i in 1:nrow(df)){
relativespeed[i]<-df[i,5]+df[i,6]
}
print("Average relative speed:")
mean(as.numeric(relativespeed))
#absolute value
print("Mean absolute value of speed_air")
mean(abs(df$speed_air))
#question 8
countmileage=0
for(i in 1:nrow(df)){
if(df[i,2]<40000 | is.na(df[i,2])){
countmileage=countmileage+1
}
}
print("Number of records with Mileage less than 40000 is")
countmileage
i=0
countheight=0
for (i in 1:nrow(df)){
if(df[i,7]<5){
countheight=countheight+1
}
}
print("Number of records with height less than 5 is")
countheight
updatedDF = df[!df$mileage< 40000 & !df$height<5 & !is.na(df$mileage)==TRUE,]
updatedDF
updatedDF <- subset(df, df$mileage>40000  & df$height>5 & is.na(df$mileage)==FALSE) #new dataset with the conditions in the question
updatedDF
#question 9
df_Ford<-subset(updatedDF,updatedDF$brand=="Ford")
df_GM<-subset(updatedDF,updatedDF$brand=="GM")
df_Toyota<-subset(updatedDF,updatedDF$brand=="Toyota")
#question 10
#speed
mean(df_Ford$speed_car)
mean(df_GM$speed_car)
mean(df_Toyota$speed_car)
sd(as.numeric(df_Ford$speed_car),na.rm = TRUE)
sd(as.numeric(df_GM$speed_car),na.rm = TRUE)
sd(as.numeric(df_Toyota$speed_car),na.rm = TRUE)
dim(df_Ford)
dim(df_GM)
dim(df_Toyota)
#height
mean(df_Ford$height)
mean(df_GM$height)
mean(df_Toyota$height)
sd(as.numeric(df_Ford$height),na.rm = TRUE)
sd(as.numeric(df_GM$height),na.rm = TRUE)
sd(as.numeric(df_Toyota$height),na.rm = TRUE)
#width
mean(df_Ford$width)
mean(df_GM$width)
mean(df_Toyota$width)
sd(as.numeric(df_Ford$width),na.rm = TRUE)
sd(as.numeric(df_GM$width),na.rm = TRUE)
sd(as.numeric(df_Toyota$width),na.rm = TRUE)
#number of accidents
mean(df_Ford$num_accidents)
mean(df_GM$num_accidents)
mean(df_Toyota$num_accidents)
#number of passengers
mean(df_Ford$num_passengers)
mean(df_GM$num_passengers)
mean(df_Toyota$num_passengers)
clear
cls
clear()
?read.table  # ? is used for functions usage instructions
setwd('C:/Users/Susheela/Desktop/GITHUB/Data-Analysis/assignment 1') # set the path to file location
getwd()
df<-read.csv("car_r.csv",header=TRUE)                     # reads the file into dataframe 'df'
?read.table  # ? is used for functions usage instructions
names(df)    # variables in the dataframe
count=0     # Number of observations with brand="ford"
for(i in 1:500){
if(df[i,1]=='Ford'){
count=count+1
}
}
print('number of observations')
print(nrow(df))                #Total number of observations
print('Ford count:')
print(count)                  #number of observations with brand="Ford"
#histogram
colMeans(df[2:8],na.rm=TRUE)
print("Standard deviations:")
i=0
for(i in 2:8){
print(colnames(df[i]))
print(c(sd(as.numeric(df[[i]]),na.rm = TRUE)))
}
#histogram
hist(as.numeric(df$brand),xlab="Brand",main="Histogram of Brand parameter")
hist(as.numeric(df$mileage),xlab="mileage",xlim=c(0,70000),main="Histogram of mileage parameter")
hist(as.numeric(df$num_accidents),xlab="num_accidents",main="Histogram of Num_accidents parameter")
hist(as.numeric(df$num_passengers),xlab="num_passengers",xlim=c(0,20),main="Histogram of Num_passengers parameter")
hist(as.numeric(df$speed_car),xlab="speed_car",main="Histogram of Speed_car parameter")
hist(as.numeric(df$speed_air),xlab="speed_air",xlim=c(-14,15),main="Histogram of speed_air parameter")
hist(as.numeric(df$height),xlab="height",main="Histogram of height parameter")
hist(as.numeric(df$width),xlab="width",main="Histogram of width parameter")
hist(as.numeric(df$ABS),xlab="ABS",main="Histogram of ABS Parameter")
#Proportion of missing values in Mileage variable
nacount=0
i=0
for (i in 1:nrow(df)){
if(is.na(as.numeric(df[i,2]))){
nacount<-nacount+1
}
}
nacount
print("Proportion of missing values")
print(nacount/nrow(df))
#relative speed
i=0
relativespeed<-list()
for(i in 1:nrow(df)){
relativespeed[i]<-df[i,5]+df[i,6]
}
print("Average relative speed:")
mean(as.numeric(relativespeed))
#absolute value
print("Mean absolute value of speed_air")
mean(abs(df$speed_air))
#question 8
countmileage=0
for(i in 1:nrow(df)){
if(df[i,2]<40000 | is.na(df[i,2])){
countmileage=countmileage+1
}
}
print("Number of records with Mileage less than 40000 is")
countmileage
i=0
countheight=0
for (i in 1:nrow(df)){
if(df[i,7]<5){
countheight=countheight+1
}
}
print("Number of records with height less than 5 is")
countheight
updatedDF = df[!df$mileage< 40000 & !df$height<5 & !is.na(df$mileage)==TRUE,]
updatedDF
updatedDF <- subset(df, df$mileage>40000  & df$height>5 & is.na(df$mileage)==FALSE) #new dataset with the conditions in the question
updatedDF
#question 9
df_Ford<-subset(updatedDF,updatedDF$brand=="Ford")
df_GM<-subset(updatedDF,updatedDF$brand=="GM")
df_Toyota<-subset(updatedDF,updatedDF$brand=="Toyota")
#question 10
#speed
mean(df_Ford$speed_car)
mean(df_GM$speed_car)
mean(df_Toyota$speed_car)
sd(as.numeric(df_Ford$speed_car),na.rm = TRUE)
sd(as.numeric(df_GM$speed_car),na.rm = TRUE)
sd(as.numeric(df_Toyota$speed_car),na.rm = TRUE)
dim(df_Ford)
dim(df_GM)
dim(df_Toyota)
#height
mean(df_Ford$height)
mean(df_GM$height)
mean(df_Toyota$height)
sd(as.numeric(df_Ford$height),na.rm = TRUE)
sd(as.numeric(df_GM$height),na.rm = TRUE)
sd(as.numeric(df_Toyota$height),na.rm = TRUE)
#width
mean(df_Ford$width)
mean(df_GM$width)
mean(df_Toyota$width)
sd(as.numeric(df_Ford$width),na.rm = TRUE)
sd(as.numeric(df_GM$width),na.rm = TRUE)
sd(as.numeric(df_Toyota$width),na.rm = TRUE)
#number of accidents
mean(df_Ford$num_accidents)
mean(df_GM$num_accidents)
mean(df_Toyota$num_accidents)
#number of passengers
mean(df_Ford$num_passengers)
mean(df_GM$num_passengers)
mean(df_Toyota$num_passengers)
